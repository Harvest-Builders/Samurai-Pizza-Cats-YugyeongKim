{"version":3,"sources":["components/Home.tsx","components/Nav.tsx","hooks/graphql/topping/queries/get-toppings.ts","components/common/PageHeader.tsx","hooks/graphql/topping/mutations/create-topping.ts","hooks/graphql/topping/mutations/delete-topping.ts","hooks/graphql/topping/mutations/update-topping.ts","hooks/topping/use-topping-mutations.ts","components/toppings/ToppingModal.tsx","lib/format-dollars.ts","components/toppings/ToppingItem.tsx","components/toppings/Toppings.tsx","assets/img/make-pizza.jpeg","assets/img/default-pizza.jpeg","components/pizzas/PizzaItem.tsx","hooks/graphql/pizzas/queries/get-pizzas.ts","hooks/graphql/pizzas/queries/mutations/create-pizza.ts","hooks/graphql/pizzas/queries/mutations/delete-pizza.ts","hooks/graphql/pizzas/queries/mutations/update-pizza.ts","hooks/pizza/use-pizza-mutations.ts","components/pizzas/PizzaModal.tsx","components/pizzas/PizzaList.tsx","components/pizzas/Pizzas.tsx","App.tsx","theme/theme.ts","Providers.tsx","index.tsx"],"names":["useStyles","makeStyles","theme","container","backgroundColor","color","display","justifyContent","flexDirection","width","height","position","overflow","img","zIndex","link","textDecoration","fontWeight","fontSize","typography","pxToRem","buttonContainer","textAlign","Home","classes","className","to","alt","src","createStyles","root","linkContainer","alignItems","padding","spacing","logo","logoText","fontFamily","Nav","useLocation","pathname","AppBar","Toolbar","style","isActive","GET_TOPPINGS","gql","header","margin","textTransform","PageHeader","pageHeader","CREATE_TOPPING","DELETE_TOPPING","UPDATE_TOPPING","useToppingMutations","useMutation","refetchQueries","createTopping","deleteTopping","updateTopping","onCreateTopping","useCallback","selectedTopping","variables","createToppingInput","name","priceCents","err","console","log","onDeleteTopping","deleteToppingInput","id","onUpdateTopping","updateToppingInput","modal","paper","palette","background","boxShadow","shadows","ToppingModal","setSelectedTopping","open","setOpen","Modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","timeout","Fade","in","Paper","noValidate","autoComplete","TextField","label","defaultValue","onChange","event","target","value","type","parseInt","IconButton","edge","onClick","AddCircle","Delete","toDollars","toLocaleString","currency","minWidth","right","ToppingItem","topping","handleOpen","props","ListItem","Edit","skeleton","verticalAlign","Toppings","React","useState","useQuery","loading","data","toppingList","toppings","map","Container","maxWidth","List","ListContainer","card","imgBox","border","cursor","marginBottom","pizzaInfoBox","gap","pizzaName","pizzaDes","pizzaPrice","newPizzaBox","newPizzaImg","addIcon","transition","fixIcon","PizzaItem","pizza","Box","Card","CardContent","backgroundImage","imgSrc","includes","defaultPizza","backgroundSize","backgroundRepeat","backgroundPosition","description","marginTop","makePizza","GET_PIZZAS","CREATE_PIZZA","DELETE_PIZZA","UPDATE_PIZZA","usePizzaMutations","createPizza","deletePizza","updatePizza","onCreatePizza","selectedPizza","createPizzaInput","toppingIds","onDeletePizza","deletePizzaInput","onUpdatePizza","updatePizzaInput","form","maxHight","h1","h2","pizzaImg","pizzaImgDefault","buttonBox","button","outline","textBox","textField","flex","labelBox","selectTopping","PizzaModal","setSelectedPizza","setSelectedOptions","validationSchema","yup","of","shape","formik","useFormik","initialValues","onSubmit","values","ids","newPizza","toppingNameList","forEach","push","selectedToppings","handleSubmit","handleChange","InputProps","input","disableUnderline","options","isMulti","styles","control","baseStyles","state","borderColor","isFocused","borderRadius","borderBottom","closeMenuOnSelect","option","toString","flexWrap","PizzasList","setselectedPizza","limit","setLimit","error","clickMorePizzas","current","pizzaList","pizzas","results","Pizzas","App","path","component","exact","createTheme","overrides","MuiButton","defaultClientOptions","uri","process","cache","InMemoryCache","Providers","clientOptions","children","StrictMode","ApolloProvider","client","ApolloClient","ThemeProvider","require","config","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a457ff93.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\nimport { makeStyles, Theme } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    backgroundColor: 'black',\n    color: 'white',\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    width: '100%',\n    height: '100vh',\n    position: 'fixed',\n    overflow: 'hidden',\n  },\n  img: {\n    position: 'absolute',\n    width: '100%',\n    zIndex: -1,\n  },\n  link: {\n    textDecoration: 'none',\n    fontWeight: 700,\n    color: 'white',\n    fontSize: theme.typography.pxToRem(50),\n    width: '100%',\n  },\n  buttonContainer: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    textAlign: 'center',\n  },\n}));\n\nconst Home = (): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.buttonContainer}>\n        <NavLink className={classes.link} to=\"/pizzas\">\n          Pizzas\n        </NavLink>\n        <NavLink className={classes.link} to=\"/toppings\">\n          Toppings\n        </NavLink>\n      </div>\n      <img\n        alt=\"samurai-pizza-cats\"\n        className={classes.img}\n        src=\"https://img5.goodfon.com/original/2500x1280/e/f1/minimalizm-stil-fon-art-art-style-background-illustration--4.jpg\"\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","import { NavLink, useLocation } from 'react-router-dom';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { AppBar, Toolbar } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      backgroundColor: 'black',\n      display: 'flex',\n      justifyContent: 'space-between',\n    },\n    linkContainer: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(2, 0, 2),\n    },\n    link: {\n      textDecoration: 'none',\n      fontWeight: 700,\n      color: 'white',\n      fontSize: theme.typography.pxToRem(20),\n      padding: theme.spacing(0, 2),\n    },\n    logo: {\n      width: theme.typography.pxToRem(50),\n    },\n    logoText: {\n      fontFamily: 'Metal Mania',\n    },\n  })\n);\n\nconst Nav = (): JSX.Element | null => {\n  const classes = useStyles();\n  const location = useLocation();\n\n  if (location.pathname === '/') return null;\n\n  return (\n    <AppBar position=\"static\">\n      <Toolbar className={classes.root}>\n        <div className={classes.linkContainer}>\n          <NavLink className={classes.link} to=\"/\">\n            <img\n              alt=\"samurai-pizza-cats\"\n              className={classes.logo}\n              src={'https://i.pinimg.com/564x/34/50/56/345056b367f0934aa86b5e21dee6f1de.jpg'}\n            />\n          </NavLink>\n          <NavLink\n            className={classes.link}\n            to=\"/pizzas\"\n            style={(isActive) => ({ color: isActive ? 'green' : 'white' })}\n          >\n            Pizzas\n          </NavLink>\n          <NavLink\n            className={classes.link}\n            to=\"/toppings\"\n            style={(isActive) => ({ color: isActive ? 'green' : 'white' })}\n          >\n            Toppings\n          </NavLink>\n        </div>\n        <h1 className={classes.logoText}>SAMURAI PIZZA CATS</h1>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Nav;\n","import { gql } from '@apollo/client';\n\nconst GET_TOPPINGS = gql`\n  query Toppings {\n    toppings {\n      id\n      name\n      priceCents\n    }\n  }\n`;\n\nexport { GET_TOPPINGS };\n","import { makeStyles, Theme } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  header: {\n    display: 'flex',\n    margin: theme.spacing(2, 0, 2),\n    fontSize: theme.typography.pxToRem(24),\n    textTransform: 'capitalize',\n  },\n}));\n\ninterface PageHeaderProps {\n  pageHeader: string;\n}\n\nconst PageHeader = ({ pageHeader }: PageHeaderProps): JSX.Element => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.header}>\n      <h1>{pageHeader}</h1>\n    </div>\n  );\n};\n\nexport default PageHeader;\n","import { gql } from '@apollo/client';\n\nexport const CREATE_TOPPING = gql`\n  mutation ($createToppingInput: CreateToppingInput!) {\n    createTopping(input: $createToppingInput) {\n      name\n      priceCents\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const DELETE_TOPPING = gql`\n  mutation ($deleteToppingInput: DeleteToppingInput!) {\n    deleteTopping(input: $deleteToppingInput)\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const UPDATE_TOPPING = gql`\n  mutation ($updateToppingInput: UpdateToppingInput!) {\n    updateTopping(input: $updateToppingInput) {\n      id\n      name\n      priceCents\n    }\n  }\n`;\n","import { useCallback } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { GET_TOPPINGS } from '../graphql/topping/queries/get-toppings';\nimport { CREATE_TOPPING } from '../graphql/topping/mutations/create-topping';\nimport { DELETE_TOPPING } from '../graphql/topping/mutations/delete-topping';\nimport { UPDATE_TOPPING } from '../graphql/topping/mutations/update-topping';\n\ninterface UseToppingMutationsOutput {\n  onCreateTopping: (selectedTopping: any) => void;\n  onDeleteTopping: (selectedTopping: any) => Promise<void>;\n  onUpdateTopping: (selectedTopping: any) => void;\n}\n\nconst useToppingMutations = (): UseToppingMutationsOutput => {\n  const [createTopping] = useMutation(CREATE_TOPPING, { refetchQueries: [GET_TOPPINGS, 'Toppings'] });\n  const [deleteTopping] = useMutation(DELETE_TOPPING, { refetchQueries: [GET_TOPPINGS, 'Toppings'] });\n  const [updateTopping] = useMutation(UPDATE_TOPPING);\n\n  const onCreateTopping = useCallback(\n    (selectedTopping) => {\n      try {\n        createTopping({\n          variables: {\n            createToppingInput: {\n              name: selectedTopping.name,\n              priceCents: selectedTopping.priceCents,\n            },\n          },\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [createTopping]\n  );\n\n  const onDeleteTopping = useCallback(\n    async (selectedTopping) => {\n      try {\n        await deleteTopping({\n          variables: {\n            deleteToppingInput: {\n              id: selectedTopping.id,\n            },\n          },\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [deleteTopping]\n  );\n\n  const onUpdateTopping = useCallback(\n    (selectedTopping) => {\n      try {\n        updateTopping({\n          variables: {\n            updateToppingInput: {\n              id: selectedTopping.id,\n              name: selectedTopping?.name,\n              priceCents: selectedTopping?.priceCents,\n            },\n          },\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [updateTopping]\n  );\n\n  return { onCreateTopping, onDeleteTopping, onUpdateTopping };\n};\n\nexport default useToppingMutations;\n","import React from 'react';\nimport { AddCircle, Delete } from '@material-ui/icons';\nimport {\n  Backdrop,\n  createStyles,\n  Fade,\n  IconButton,\n  makeStyles,\n  Modal,\n  Paper,\n  TextField,\n  Theme,\n} from '@material-ui/core';\n\nimport useToppingMutations from '../../hooks/topping/use-topping-mutations';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  })\n);\n\ninterface ToppingModalProps {\n  selectedTopping?: any;\n  setSelectedTopping: React.Dispatch<React.SetStateAction<any>>;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst ToppingModal = ({ selectedTopping, setSelectedTopping, open, setOpen }: ToppingModalProps): JSX.Element => {\n  const classes = useStyles();\n  const { onCreateTopping, onDeleteTopping, onUpdateTopping } = useToppingMutations();\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      className={classes.modal}\n      open={open}\n      onClose={(): void => setOpen(false)}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <Paper className={classes.paper}>\n          <h2>{selectedTopping ? 'Edit' : 'Add'} Topping</h2>\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField\n              id=\"name-input\"\n              label=\"Topping Name\"\n              defaultValue={selectedTopping?.name}\n              onChange={(event): void => setSelectedTopping({ ...selectedTopping, name: event.target.value })}\n            />\n            <TextField\n              id=\"price-input\"\n              label=\"Topping Price in Cents\"\n              type=\"number\"\n              defaultValue={selectedTopping?.priceCents}\n              onChange={(event): void =>\n                setSelectedTopping({ ...selectedTopping, priceCents: parseInt(event.target.value) })\n              }\n            />\n            <IconButton\n              edge=\"end\"\n              aria-label=\"update\"\n              type=\"button\"\n              onClick={(): void => {\n                selectedTopping?.id ? onUpdateTopping(selectedTopping) : onCreateTopping(selectedTopping);\n                setOpen(false);\n              }}\n            >\n              <AddCircle />\n            </IconButton>\n            <IconButton\n              edge=\"end\"\n              aria-label=\"delete\"\n              type=\"button\"\n              onClick={(): void => {\n                onDeleteTopping(selectedTopping);\n                setOpen(false);\n              }}\n            >\n              <Delete />\n            </IconButton>\n          </form>\n        </Paper>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default ToppingModal;\n","const toDollars = (priceCents: number): string => {\n  const dollars = priceCents / 100;\n  return dollars.toLocaleString('en-US', { style: 'currency', currency: 'CAD' });\n};\n\nexport default toDollars;\n","import { IconButton, ListItem, Theme } from '@material-ui/core';\nimport { AddCircle, Edit } from '@material-ui/icons';\nimport { makeStyles } from '@material-ui/styles';\n\nimport toDollars from '../../lib/format-dollars';\nimport { Topping } from '../../types';\n\nconst useStyles = makeStyles(({ typography }: Theme) => ({\n  container: {\n    display: 'flex',\n  },\n  name: {\n    minWidth: typography.pxToRem(500),\n  },\n  right: {\n    display: 'flex',\n    width: '100%',\n    justifyContent: 'space-between',\n  },\n}));\n\nexport interface ToppingItemProps {\n  topping?: Topping;\n  handleOpen: (topping?: Topping) => void;\n}\n\nconst ToppingItem: React.FC<ToppingItemProps> = ({ topping, handleOpen, ...props }) => {\n  const classes = useStyles();\n\n  return (\n    <ListItem {...props} className={classes.container}>\n      <p data-testid={`topping-name-${topping?.id}`} className={classes.name}>\n        {topping?.name ?? 'Add topping'}\n      </p>\n      <div className={classes.right}>\n        <p data-testid={`topping-price-${topping?.id}`}>{topping?.priceCents ? toDollars(topping.priceCents) : ''}</p>\n        <IconButton edge=\"end\" aria-label=\"modify\" type=\"button\" onClick={(): void => handleOpen(topping)}>\n          {topping ? <Edit /> : <AddCircle />}\n        </IconButton>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default ToppingItem;\n","import React from 'react';\nimport { useQuery } from '@apollo/client';\nimport { makeStyles } from '@material-ui/styles';\nimport { Container, createStyles, List, ListItem, Theme } from '@material-ui/core';\n\nimport { Topping } from '../../types';\nimport { GET_TOPPINGS } from '../../hooks/graphql/topping/queries/get-toppings';\nimport PageHeader from '../common/PageHeader';\nimport ToppingModal from './ToppingModal';\nimport ToppingItem from './ToppingItem';\n\nconst useStyles = makeStyles(({ typography }: Theme) =>\n  createStyles({\n    container: {\n      minWidth: typography.pxToRem(650),\n    },\n    skeleton: {\n      display: 'flex',\n      justifyContent: 'center',\n      verticalAlign: 'center',\n    },\n    header: {\n      display: 'flex',\n    },\n    name: {\n      minWidth: typography.pxToRem(500),\n    },\n    right: {\n      display: 'flex',\n      width: '100%',\n      justifyContent: 'space-between',\n    },\n  })\n);\n\nconst Toppings: React.FC = () => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const [selectedTopping, setSelectedTopping] = React.useState<Partial<Topping>>();\n  const { loading, data } = useQuery(GET_TOPPINGS);\n\n  const handleOpen = (topping?: Topping): void => {\n    setSelectedTopping(topping);\n    setOpen(true);\n  };\n\n  if (loading) {\n    return <div className={classes.skeleton}>Loading ...</div>;\n  }\n\n  const toppingList = data?.toppings.map((topping: Topping) => (\n    <ToppingItem\n      data-testid={`topping-item-${topping?.id}`}\n      key={topping.id}\n      handleOpen={handleOpen}\n      topping={topping}\n    />\n  ));\n\n  return (\n    <Container maxWidth=\"md\">\n      <PageHeader pageHeader={'Toppings'} />\n      <List className={classes.container}>\n        <ListItem className={classes.header}>\n          <h2 className={classes.name}>Topping</h2>\n          <div className={classes.right}>\n            <h2>Price</h2>\n            <h2>Modify</h2>\n          </div>\n        </ListItem>\n        <ToppingItem key=\"add-topping\" handleOpen={handleOpen} />\n        {toppingList}\n      </List>\n\n      <ToppingModal\n        selectedTopping={selectedTopping}\n        setSelectedTopping={setSelectedTopping}\n        open={open}\n        setOpen={setOpen}\n      />\n    </Container>\n  );\n};\n\nexport default Toppings;\n","export default __webpack_public_path__ + \"static/media/make-pizza.591c7146.jpeg\";","export default __webpack_public_path__ + \"static/media/default-pizza.c3e5cb5c.jpeg\";","import { Box, Card, CardContent } from '@material-ui/core';\nimport { IconButton } from '@material-ui/core';\nimport { makeStyles, createStyles } from '@material-ui/styles';\nimport toDollars from '../../lib/format-dollars';\nimport { Pizza } from '../../types/pizza';\nimport makePizza from '../../assets/img/make-pizza.jpeg';\nimport { AddCircle } from '@material-ui/icons';\nimport { useState } from 'react';\nimport defaultPizza from '../../assets/img/default-pizza.jpeg';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    ListContainer: {\n      display: 'flex',\n      width: '25%',\n      justifyContent: 'center',\n      margin: '2vw',\n    },\n    card: {\n      display: 'flex',\n      width: '25vw',\n      height: '65vh',\n      flexDirection: 'column',\n      backgroundColor: 'white',\n    },\n    imgBox: {\n      textAlign: 'right',\n      width: '95%',\n      height: '90%',\n      border: 'none',\n      cursor: 'pointer',\n      marginBottom: '10px',\n    },\n    pizzaInfoBox: {\n      height: '30%',\n      width: '90%',\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      gap: '20px',\n    },\n    pizzaName: {\n      fontSize: '1.5vw',\n      fontWeight: 'bold',\n    },\n    pizzaDes: {\n      fontSize: '1vw',\n    },\n    pizzaPrice: {\n      fontSize: '1.2vw',\n    },\n    newPizzaBox: {\n      backgroundColor: 'black',\n      display: 'flex',\n      flexDirection: 'column',\n      height: '100%',\n      justifyContent: 'space-between',\n      color: 'white',\n    },\n    newPizzaImg: {\n      width: '90%',\n    },\n    addIcon: {\n      fontSize: '3vw',\n      color: 'white',\n      transition: '0.3s',\n      '&:hover': {\n        color: 'grey',\n      },\n    },\n    fixIcon: {\n      fontSize: '3vw',\n      color: 'black',\n      position: 'relative',\n      cursor: 'pointer',\n      transition: '0.3s',\n      '&:hover': {\n        color: 'grey',\n      },\n    },\n  })\n);\n\nexport interface PizzaItemProps {\n  pizza?: Pizza;\n  handleOpen: (pizza?: Pizza) => void;\n}\n\nconst PizzaItem: React.FC<PizzaItemProps> = ({ pizza, handleOpen, ...props }) => {\n  const classes = useStyles();\n  return (\n    <Box className={classes.ListContainer}>\n      <Card>\n        <CardContent style={{ padding: '0', width: '100%', height: '100%' }} {...props}>\n          {pizza ? (\n            <div className={classes.card}>\n              <button\n                className={classes.imgBox}\n                type=\"button\"\n                onClick={(): void => handleOpen(pizza)}\n                style={{\n                  backgroundImage: `url(${pizza.imgSrc?.includes('https') ? pizza?.imgSrc : defaultPizza})`,\n                  backgroundSize: '100% 100%',\n                  backgroundRepeat: 'no-repeat',\n                  backgroundPosition: 'center',\n                }}\n                data-testid={`pizza-imgSrc-${pizza?.id}`}\n              ></button>\n              <div className={classes.pizzaInfoBox}>\n                <p data-testid={`pizza-name-${pizza?.id}`} className={classes.pizzaName}>\n                  {pizza?.name}\n                </p>\n                <p data-testid={`pizza-description-${pizza?.id}`} className={classes.pizzaDes}>\n                  {pizza?.description ? pizza.description : ''}\n                </p>\n                <p data-testid={`pizza-priceCents-${pizza?.id}`} className={classes.pizzaPrice}>\n                  {pizza?.priceCents ? toDollars(pizza.priceCents) : ''}\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className={classes.card}>\n              <div className={classes.newPizzaBox}>\n                <h2 style={{ fontSize: '2vw', textAlign: 'center', marginTop: '1vw' }}>Make New Pizza</h2>\n                <img className={classes.newPizzaImg} src={makePizza} />\n                <IconButton\n                  className={classes.addIcon}\n                  edge=\"end\"\n                  aria-label=\"create\"\n                  type=\"button\"\n                  onClick={(): void => handleOpen(pizza)}\n                >\n                  <AddCircle fontSize=\"inherit\" />\n                </IconButton>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </Box>\n  );\n};\n\nexport default PizzaItem;\n","import { gql } from '@apollo/client';\n\nconst GET_PIZZAS = gql`\n  query getPizzas($input: CursorResultsInput!) {\n    pizzas(input: $input) {\n      results {\n        id\n        imgSrc\n        name\n        toppingIds\n        toppings {\n          id\n          name\n        }\n        priceCents\n      }\n      totalCount\n      hasNextPage\n      cursor\n    }\n  }\n`;\n\nexport { GET_PIZZAS };\n","import { gql } from '@apollo/client';\n\nexport const CREATE_PIZZA = gql`\n  mutation ($createPizzaInput: CreatePizzaInput!) {\n    createPizza(input: $createPizzaInput) {\n      id\n      name\n      description\n      imgSrc\n      toppings {\n        id\n        name\n        priceCents\n      }\n    }\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const DELETE_PIZZA = gql`\n  mutation ($deletePizzaInput: DeletePizzaInput!) {\n    deletePizza(input: $deletePizzaInput)\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const UPDATE_PIZZA = gql`\n  mutation ($updatePizzaInput: UpdatePizzaInput!) {\n    updatePizza(input: $updatePizzaInput) {\n      id\n      name\n      description\n      imgSrc\n      toppings {\n        id\n        name\n        priceCents\n      }\n    }\n  }\n`;\n","import { useCallback } from 'react';\nimport { useMutation } from '@apollo/client';\n\nimport { GET_PIZZAS } from '../graphql/pizzas/queries/get-pizzas';\nimport { CREATE_PIZZA } from '../graphql/pizzas/queries/mutations/create-pizza';\nimport { DELETE_PIZZA } from '../graphql/pizzas/queries/mutations/delete-pizza';\nimport { UPDATE_PIZZA } from '../graphql/pizzas/queries/mutations/update-pizza';\nimport { CreatePizzaInput } from '../../../../server/src/application/providers/pizzas/pizza.provider.types';\n\ninterface UsePizzaMutationsOutput {\n  onCreatePizza: (selectedPizza: CreatePizzaInput | undefined) => void;\n  onDeletePizza: (selectedPizza: any) => Promise<void>;\n  onUpdatePizza: (selectedPizza: any) => void;\n}\n\nconst usePizzaMutations = (): UsePizzaMutationsOutput => {\n  const [createPizza] = useMutation(CREATE_PIZZA, { refetchQueries: [GET_PIZZAS, 'Pizzas'] });\n  const [deletePizza] = useMutation(DELETE_PIZZA, { refetchQueries: [GET_PIZZAS, 'Pizzas'] });\n  const [updatePizza] = useMutation(UPDATE_PIZZA);\n  const onCreatePizza = useCallback(\n    (selectedPizza: CreatePizzaInput | undefined) => {\n      try {\n        //console.log(\"mutations\" + selectedPizza);\n        createPizza({\n          variables: {\n            createPizzaInput: {\n              name: selectedPizza?.name,\n              description: selectedPizza?.description,\n              toppingIds: selectedPizza?.toppingIds,\n              imgSrc: selectedPizza?.imgSrc,\n            },\n          },\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [createPizza]\n  );\n\n  const onDeletePizza = useCallback(\n    async (selectedPizza) => {\n      try {\n        await deletePizza({\n          variables: {\n            deletePizzaInput: {\n              id: selectedPizza.id,\n            },\n          },\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [deletePizza]\n  );\n\n  const onUpdatePizza = useCallback(\n    (selectedPizza) => {\n      try {\n        updatePizza({\n          variables: {\n            updatePizzaInput: {\n              id: selectedPizza.id,\n              name: selectedPizza?.name,\n              description: selectedPizza?.description,\n              toppingIds: selectedPizza?.toppingIds,\n              imgSrc: selectedPizza?.imgSrc,\n            },\n          },\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    },\n    [updatePizza]\n  );\n\n  return { onCreatePizza, onDeletePizza, onUpdatePizza };\n};\n\nexport default usePizzaMutations;\n","import React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport Select from 'react-select';\nimport { Backdrop, createStyles, Fade, makeStyles, Modal, Paper, TextField, Theme } from '@material-ui/core';\n\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\nimport { GET_TOPPINGS } from '../../hooks/graphql/topping/queries/get-toppings';\nimport { useQuery } from '@apollo/client';\nimport usePizzaMutations from '../../hooks/pizza/use-pizza-mutations';\nimport defaultPizza from '../../assets/img/default-pizza.jpeg';\nimport makePizza from '../../assets/img/make-pizza.jpeg';\nimport { Topping } from '../../types/schema';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    modal: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },\n    skeleton: {\n      display: 'flex',\n      justifyContent: 'center',\n      verticalAlign: 'center',\n    },\n    paper: {\n      backgroundColor: theme.palette.background.paper,\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(1, 3, 1),\n    },\n    root: {\n      '& .MuiTextField-root': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    form: {\n      display: 'flex',\n      flexDirection: 'column',\n      margin: '10px',\n      maxWidth: '30vw',\n      maxHight: '5vh',\n    },\n    h1: {\n      fontSize: '2vw',\n      textAlign: 'center',\n    },\n    h2: {\n      fontSize: '1.5vw',\n    },\n    pizzaImg: {\n      width: '25vw',\n      margin: '10px',\n    },\n    pizzaImgDefault: {\n      width: '25vw',\n      margin: '10px',\n    },\n    buttonBox: {\n      textAlign: 'center',\n    },\n    button: {\n      border: 'none',\n      outline: 'none',\n      backgroundColor: 'inherit',\n      fontSize: '1.3vw',\n      fontWeight: 'bold',\n      padding: '1.5vw 1vw 0 1vw',\n      cursor: 'pointer',\n    },\n    textBox: {\n      display: 'flex',\n    },\n    textField: {\n      flex: '2',\n      fontSize: '1vw',\n      '&:focus': {\n        border: 'pink solid 2px',\n      },\n    },\n    labelBox: {\n      flex: '1',\n      fontSize: '1vw',\n    },\n    selectTopping: {\n      width: '100%',\n      height: '10%',\n      border: 'none',\n    },\n  })\n);\n\ninterface PizzaModalProps {\n  selectedPizza?: any;\n  setSelectedPizza: React.Dispatch<React.SetStateAction<any>>;\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\ninterface ItoppingNameList {\n  id: string;\n  value: string;\n  label: string;\n}\n\nconst PizzaModal = ({ selectedPizza, setSelectedPizza, open, setOpen }: PizzaModalProps): JSX.Element => {\n  const classes = useStyles();\n  const { onCreatePizza, onDeletePizza, onUpdatePizza } = usePizzaMutations();\n  const { loading, data } = useQuery(GET_TOPPINGS);\n  const [selectedOptions, setSelectedOptions] = useState<string[]>([]);\n\n  const validationSchema = yup.object({\n    name: yup.string(),\n    description: yup.string(),\n    imgSrc: yup.string(),\n    toppingIds: yup.array().of(\n      yup.object().shape({\n        id: yup.string(),\n      })\n    ),\n  });\n\n  const formik = useFormik({\n    initialValues: {\n      id: selectedPizza?.id,\n      name: selectedPizza?.name,\n      description: selectedPizza?.description,\n      imgSrc: selectedPizza?.imgSrc,\n      toppingIds: selectedPizza?.toppings ? selectedPizza?.toppings : [],\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      let ids = values.toppingIds.map((topping: any) => topping.id);\n      console.log(values);\n      if (selectedPizza) {\n        let newPizza = {\n          id: selectedPizza.id,\n          name: values.name,\n          description: values.description,\n          imgSrc: values.imgSrc,\n          toppingIds: ids,\n        };\n        onUpdatePizza(newPizza);\n      } else {\n        let newPizza = {\n          name: values.name,\n          description: values.description,\n          imgSrc: values.imgSrc,\n          toppingIds: ids,\n        };\n        onCreatePizza(newPizza);\n      }\n      setOpen(false);\n    },\n  });\n\n  const handleChange = (options: any) => {\n    const toppingIds = options.map((option: any) => option.id.toString());\n    setSelectedOptions(toppingIds.id);\n    formik.values.toppingIds = options;\n  };\n\n  if (loading) {\n    return <div>Loading ...</div>;\n  }\n\n  let toppingNameList: ItoppingNameList[] = [];\n  data?.toppings.forEach((topping: Topping) => {\n    toppingNameList.push({\n      id: topping.id,\n      value: topping.name,\n      label: topping.name,\n    });\n  });\n\n  let selectedToppings: ItoppingNameList[] = [];\n\n  selectedPizza?.toppings.forEach((topping: Topping) => {\n    selectedToppings.push({\n      id: topping.id,\n      value: topping.name,\n      label: topping.name,\n    });\n  });\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      className={classes.modal}\n      open={open}\n      onClose={(): void => setOpen(false)}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <Paper className={classes.paper}>\n          {selectedPizza ? (\n            <>\n              <h1 className={classes.h1} id=\"name\">\n                {selectedPizza.name}\n              </h1>\n              <img\n                id=\"imgSrc\"\n                className={classes.pizzaImg}\n                src={selectedPizza.imgSrc.includes('https') ? selectedPizza.imgSrc : defaultPizza}\n              />\n            </>\n          ) : (\n            <>\n              <img id=\"imgSrc\" src={makePizza} alt=\"defaultPizza\" className={classes.pizzaImgDefault} />\n            </>\n          )}\n          <form onSubmit={formik.handleSubmit} noValidate autoComplete=\"off\" className={classes.form}>\n            <h2 className={classes.h2}>Detail</h2>\n            <div className={classes.textBox}>\n              <div className={classes.labelBox}>\n                <label>Name: </label>\n              </div>\n              <TextField\n                id=\"name\"\n                className={classes.textField}\n                defaultValue={selectedPizza?.name ? selectedPizza.name : 'New pizza'}\n                onChange={formik.handleChange}\n                InputProps={{\n                  classes: {\n                    input: classes.textField,\n                  },\n                  disableUnderline: true,\n                }}\n              />\n            </div>\n            <div className={classes.textBox}>\n              <div className={classes.labelBox}>\n                <label>Description: </label>\n              </div>\n              <TextField\n                id=\"description\"\n                className={classes.textField}\n                type=\"text\"\n                defaultValue={selectedPizza?.description ? selectedPizza.description : 'description'}\n                onChange={formik.handleChange}\n                InputProps={{\n                  classes: {\n                    input: classes.textField,\n                  },\n                  disableUnderline: true,\n                }}\n              />\n            </div>\n            <div className={classes.textBox}>\n              <div className={classes.labelBox}>\n                <label>Image URL: </label>\n              </div>\n              <TextField\n                id=\"imgSrc\"\n                className={classes.textField}\n                type=\"text\"\n                defaultValue={selectedPizza?.imgSrc ? selectedPizza.imgSrc : 'defaultPizza'}\n                onChange={formik.handleChange}\n                InputProps={{\n                  classes: {\n                    input: classes.textField,\n                  },\n                  disableUnderline: true,\n                }}\n              />\n            </div>\n            <h2 className={classes.h2}>Toppings</h2>\n            <Select\n              className={classes.selectTopping}\n              options={toppingNameList}\n              isMulti\n              defaultValue={selectedToppings.map((topping: any) => topping)}\n              styles={{\n                control: (baseStyles, state) => ({\n                  ...baseStyles,\n                  borderColor: state.isFocused ? 'red' : '',\n                  borderRadius: '0',\n                  border: 'none',\n                  borderBottom: 'black solid 1px',\n                }),\n              }}\n              closeMenuOnSelect={false}\n              onChange={handleChange}\n            />\n            {selectedPizza ? (\n              <div className={classes.buttonBox}>\n                <button\n                  className={classes.button}\n                  aria-label=\"update\"\n                  onClick={(): void => {\n                    onUpdatePizza(selectedPizza);\n                  }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n                <button\n                  className={classes.button}\n                  aria-label=\"delete\"\n                  onClick={(): void => {\n                    onDeletePizza(selectedPizza);\n                    setOpen(false);\n                  }}\n                  type=\"submit\"\n                >\n                  Delete\n                </button>\n              </div>\n            ) : (\n              <div className={classes.buttonBox}>\n                <button\n                  className={classes.button}\n                  aria-label=\"create\"\n                  onClick={(): void => {\n                    onCreatePizza(selectedPizza);\n                  }}\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n              </div>\n            )}\n          </form>\n        </Paper>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default PizzaModal;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Container } from '@material-ui/core';\nimport { useQuery } from '@apollo/client';\nimport { makeStyles } from '@material-ui/styles';\nimport { createStyles, Theme } from '@material-ui/core';\nimport { GetPizzaResult, Pizza } from '../../types';\nimport PizzaItem from './PizzaItem';\nimport { GET_PIZZAS } from '../../hooks/graphql/pizzas/queries/get-pizzas';\nimport PizzaModal from './PizzaModal';\n\nconst useStyles = makeStyles(({ typography }: Theme) =>\n  createStyles({\n    container: {\n      display: 'flex',\n      justifyContent: 'center',\n      flexWrap: 'wrap',\n    },\n    skeleton: {\n      display: 'flex',\n      justifyContent: 'center',\n      verticalAlign: 'center',\n    },\n    button: {\n      backgroundColor: 'white',\n      fontSize: '24px',\n      border: 'none',\n      cursor: 'pointer',\n      padding: '2vw',\n      outline: 'none',\n      margin: 'auto',\n      display: 'block',\n    },\n  })\n);\n\ninterface ItoppingNameList {\n  id: string;\n  value: string;\n  label: string;\n}\n\nconst PizzasList: React.FC = () => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [selectedPizza, setselectedPizza] = React.useState<Partial<Pizza>>();\n  const [limit, setLimit] = useState(5);\n  const { loading, error, data } = useQuery(GET_PIZZAS, {\n    variables: {\n      input: {\n        limit,\n        cursor: 'empty',\n      },\n    },\n  });\n\n  const clickMorePizzas = useCallback((event) => setLimit((current) => current + 3), [limit]);\n\n  if (loading) {\n    return (\n      <div data-testid={`pizza-list-loading`} className={classes.skeleton}>\n        Pizza List Loading ...\n      </div>\n    );\n  }\n\n  const handleOpen = (pizza?: Pizza): void => {\n    setselectedPizza(pizza);\n    setOpen(true);\n  };\n\n  const pizzaList = data?.pizzas.results.map((pizza: Pizza) => (\n    <PizzaItem data-testid={`pizza-item${pizza?.id}`} key={pizza?.id} handleOpen={handleOpen} pizza={pizza} />\n  ));\n\n  return (\n    <Container maxWidth=\"xl\">\n      <div data-testid={`pizza-item-list`}></div>\n      <div className={classes.container}>\n        <PizzaItem key=\"add-pizza\" handleOpen={handleOpen} />\n        {pizzaList}\n      </div>\n      <button className={classes.button} onClick={clickMorePizzas}>\n        See more pizzas\n      </button>\n      <PizzaModal selectedPizza={selectedPizza} setSelectedPizza={setselectedPizza} open={open} setOpen={setOpen} />\n    </Container>\n  );\n};\n\nexport default PizzasList;\n","import React from 'react';\nimport PageHeader from '../common/PageHeader';\nimport PizzasList from './PizzaList';\nimport { Container } from '@material-ui/core';\n\nconst Pizzas: React.FC = () => {\n  return (\n    <Container maxWidth=\"xl\" style={{ display: 'flex', flexDirection: 'column' }}>\n      <PageHeader pageHeader={'Pizzas'} />\n      <PizzasList />\n    </Container>\n  );\n};\n\nexport default Pizzas;\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Nav from './components/Nav';\nimport Toppings from './components/toppings/Toppings';\nimport Pizzas from './components/pizzas/Pizzas';\n\nconst App = (): JSX.Element => {\n  return (\n    <BrowserRouter>\n      <Nav />\n      <Switch>\n        <Route path=\"/pizzas\" component={Pizzas} exact />ß\n        <Route path=\"/toppings\" component={Toppings} exact />\n        <Route path=\"/\" component={Home} exact />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { createTheme } from '@material-ui/core';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: 'Poppins, Roboto, sans-serif',\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        fontFamily: 'Poppins, sans-serif',\n        textTransform: 'none',\n      },\n    },\n  },\n});\n\nexport { theme };\n","import React from 'react';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  ApolloClientOptions,\n  NormalizedCacheObject,\n} from '@apollo/client';\nimport { ThemeProvider } from '@material-ui/core';\n\nimport './index.css';\nimport { theme } from './theme/theme';\n\ninterface ProvidersProps {\n  clientOptions?: Partial<ApolloClientOptions<NormalizedCacheObject>>;\n}\n\nconst defaultClientOptions: ApolloClientOptions<NormalizedCacheObject> = {\n  uri: process.env.REACT_APP_SERVER_URL,\n  cache: new InMemoryCache({}),\n};\n\nconst Providers: React.FC<ProvidersProps> = ({ clientOptions = {}, children }) => (\n  <React.StrictMode>\n    <ApolloProvider\n      client={\n        new ApolloClient({\n          ...defaultClientOptions,\n          ...clientOptions,\n        })\n      }\n    >\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </ApolloProvider>\n  </React.StrictMode>\n);\n\nexport { Providers };\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport { Providers } from './Providers';\n\nrequire('dotenv').config();\n\nReactDOM.render(\n  <Providers>\n    <App />\n  </Providers>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}